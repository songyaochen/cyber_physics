component plant
%Plant of quadrocopter

inputs
   ctrl={[0;0;0;0],'N'}; %Thrust:left
end

outputs
    pos = {[0;0;0],'m'};       %Position:right
    v   = {[0;0;0], 'm/s' };   %Velocity:right
    a   = {[0;0;0], 'm/s^2' }; %Acceleration:right
    %dangle = {[0;0;0],'rad/s'};%Euler Angle Derivative:right
    angle = {[0;0;0],'rad'};   %Angle:right
    w     = {[0;0;0],'rad/s'}; %Angular velocity:right
end

parameters
    m = {0.027,'kg'};       %Mass
    g = {9.81,'m/s^2'};     %Gravity
    d = {0.046,'m'};        %Arm length
    lift = {1.9796e-9,'N/(rad/s)^2'}; %Lift constant
    drag = {2.5383e-11,'N*m/(rad/s)^2'};%Drag constant
    F = {0.25,'N*s/m'}      %Air friction coefficient
    c = {0,'m/s^2'}
end

parameters(Access=private)    
    %Moment of inertia matrix
    Jx = {1.1463e-5,'kg*m^2'};
    Jy = {1.6993e-5,'kg*m^2'};
    Jz = {2.9944e-5,'kg*m^2'};
    J = [Jx,0,0;0,Jy,0;0,0,Jz];

    % Add time invariant parameters here 

end

variables(Access=private)
    T={0,'N'};
    tx={0,'N*m'};
    ty={0,'N*m'};
    tz={0,'N*m'};

    phi={0,'rad'};
    theta={0,'rad'};
    psi={0,'rad'};

    wb = {zeros(3,1),'rad/s'};
    rotx = {eye(3),'1'};
    roty = {eye(3),'1'};
    rotz = {eye(3),'1'};
    R_b2w = {eye(3),'1'};
    T_angleder2w = {eye(3),'1'};
    % Add time variant variables here

end

equations
     rotx  == [1 0        0; 
              0 cos(phi) -sin(phi);
              0 sin(phi) cos(phi)];
    roty  == [cos(theta)  0 sin(theta); 
              0           1 0; 
              -sin(theta) 0 cos(theta)];
    rotz  == [cos(psi) -sin(psi) 0; 
              sin(psi)  cos(psi) 0; 
              0         0        1];
    R_b2w == rotz * roty * rotx; % body transfer to the world
    pos.der == v;
    v.der   == a;
%     m * a == -[0 0 m*g]' + R_b2w * [0;0;T]-F*v;
    a == [c;c;c];
    
    
   
    % Add all equations here 
    T==ctrl(1)+ctrl(2)+ctrl(3)+ctrl(4);
    tx==d*(ctrl(3)+ctrl(4)-ctrl(1)-ctrl(2))/sqrt(2);
    ty==d*(ctrl(2)+ctrl(3)-ctrl(1)-ctrl(4))/sqrt(2);
    tz==drag/lift*(ctrl(2)+ctrl(4)-ctrl(1)-ctrl(3));
    J*wb.der==cross(-wb,J*wb)+[tx;ty;tz];  % with respect to body
     angle == [phi theta psi]';
     w==angle.der;
    T_angleder2w == [ 1,        0,            sin(theta)
                      0, cos(phi),  -cos(theta)*sin(phi)
                      0, sin(phi),   cos(phi)*cos(theta)];
    wb==T_angleder2w*w;  %% w here is body angular velocity or world angular velocity?????  
   %% need to update the orientation of the world frame

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
end